#!/usr/bin/env python3
"""
Convert SVG weather/moon icons to 24x24 1-bit bitmaps and emit a C header
with PROGMEM arrays suitable for Adafruit GFX drawXBitmap.

Dependencies:
  pip install cairosvg pillow
"""
import io
import os

import cairosvg
from PIL import Image

PROJECT_ROOT = os.path.dirname(os.path.dirname(__file__))
SRC_DIR = os.path.join(PROJECT_ROOT, "web", "icons", "mdi")
OUT_HEADER = os.path.join(PROJECT_ROOT, "firmware", "arduino", "src", "icons_generated.h")

ICON_NAMES: list[str] = [
    # weather
    "weather-sunny",
    "weather-partly-cloudy",
    "weather-cloudy",
    "weather-fog",
    "weather-pouring",
    "weather-snowy",
    "weather-lightning",
    "weather-night",
    "weather-night-partly-cloudy",
    # moon
    "moon-new",
    "moon-waxing-crescent",
    "moon-first-quarter",
    "moon-waxing-gibbous",
    "moon-full",
    "moon-waning-gibbous",
    "moon-last-quarter",
    "moon-waning-crescent",
]

WIDTH = 24
HEIGHT = 24


def svg_to_png_bytes(svg_path: str) -> bytes:
    with open(svg_path, "rb") as f:
        svg_data = f.read()
    # Render at higher scale then downsample for sharper edges
    return cairosvg.svg2png(bytestring=svg_data, output_width=96, output_height=96)


def rasterize_1bit_centered(png_bytes: bytes, invert: bool = False) -> Image.Image:
    with Image.open(io.BytesIO(png_bytes)) as im:
        im = im.convert("L")  # grayscale
        # Fit into 24x24 preserving aspect
        im.thumbnail((WIDTH, HEIGHT), Image.Resampling.LANCZOS)
        # Pad to 24x24
        canvas = Image.new("L", (WIDTH, HEIGHT), color=255)
        ox = (WIDTH - im.width) // 2
        oy = (HEIGHT - im.height) // 2
        canvas.paste(im, (ox, oy))
        # Binarize
        bw = canvas.point(lambda p: 0 if p < 160 else 255, "1")
        if invert:
            bw = bw.point(lambda p: 255 - p, "1")
        return bw


def pack_xbm_bits(img_1bit: Image.Image) -> bytes:
    assert img_1bit.mode == "1"
    out = bytearray()
    for y in range(HEIGHT):
        byte = 0
        bit_count = 0
        for x in range(WIDTH):
            # Pillow '1': 0=black, 255=white
            bit = 1 if img_1bit.getpixel((x, y)) == 0 else 0
            # XBM is LSB first within a byte
            byte |= (bit & 1) << bit_count
            bit_count += 1
            if bit_count == 8:
                out.append(byte)
                byte = 0
                bit_count = 0
        if bit_count != 0:
            out.append(byte)
    return bytes(out)


def c_array_name(name: str) -> str:
    return name.replace("-", "_") + "_24x24_bits"


def main() -> None:
    header_lines: list[str] = []
    header_lines.append("#pragma once")
    header_lines.append("// Copyright 2024 Justin")
    header_lines.append("#include <stdint.h>")
    header_lines.append("#include <avr/pgmspace.h>")
    header_lines.append("")
    header_lines.append("// Auto-generated by scripts/convert_icons.py")
    header_lines.append("#define ICON_W 24")
    header_lines.append("#define ICON_H 24")
    header_lines.append("")
    header_lines.append("enum IconId {")
    for name in ICON_NAMES:
        header_lines.append(f'    ICON_{name.replace("-","_").upper()},')
    header_lines.append("};")
    header_lines.append("")

    for name in ICON_NAMES:
        svg_path = os.path.join(SRC_DIR, f"{name}.svg")
        if not os.path.exists(svg_path):
            print("missing", svg_path)
            continue
        png_bytes = svg_to_png_bytes(svg_path)
        img = rasterize_1bit_centered(png_bytes)
        bits = pack_xbm_bits(img)
        arr_name = c_array_name(name)
        header_lines.append(f"static const uint8_t {arr_name}[] PROGMEM = {{")
        # format bytes as 0x.., and wrap to keep lines <= 80 chars
        indent = "    "
        # Use a conservative fixed bytes-per-line so generated data lines stay under 80 chars
        bytes_per_line = 4
        line = indent
        for i, b in enumerate(bits):
            line += f"0x{b:02X}, "
            if (i + 1) % bytes_per_line == 0:
                header_lines.append(line.rstrip())
                line = indent
        if line.strip():
            header_lines.append(line.rstrip())
        header_lines.append("};")
        header_lines.append("")

    # draw helper
    header_lines.append("template<typename GFX>")
    header_lines.append("inline void draw_icon_xbm(GFX& d, int16_t x, int16_t y,")
    header_lines.append("    IconId id, uint16_t color) {")
    header_lines.append("    switch (id) {")
    for name in ICON_NAMES:
        arr = c_array_name(name)
        enum_name = "ICON_" + name.replace("-", "_").upper()
        header_lines.append(f"    case {enum_name}:")
        # Emit draw call and break on separate lines to keep line length short
        header_lines.append(f"        d.drawXBitmap(x, y, {arr}, ICON_W, ICON_H, color);")
        header_lines.append("        break;")
    header_lines.append("    default: break;")
    header_lines.append("    }")
    header_lines.append("}")

    os.makedirs(os.path.dirname(OUT_HEADER), exist_ok=True)
    with open(OUT_HEADER, "w") as f:
        f.write("\n".join(header_lines) + "\n")
    print("wrote", OUT_HEADER)


if __name__ == "__main__":
    main()
