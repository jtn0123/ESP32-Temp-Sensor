#!/usr/bin/env python3
import hashlib
import json
import os
import pathlib
from typing import Any, Dict, List
import zlib

# Support both direct CLI and PlatformIO pre-script execution where __file__
# may
# not be defined. Fall back to the project root from the working directory.
try:
    THIS = pathlib.Path(__file__).resolve()
    ROOT = THIS.parents[1]
except Exception:
    ROOT = pathlib.Path(os.getcwd())
    # If invoked from firmware/arduino, hop up two levels to the repo root
    if (ROOT / "platformio.ini").exists():
        ROOT = ROOT.parent.parent

JSON_PATH = ROOT / "config" / "display_geometry.json"
OUT_PATH = ROOT / "firmware" / "arduino" / "src" / "display_layout.h"


def generate_header(data: Dict[str, Any]) -> str:
    canvas = data.get("canvas", {})
    rects: Dict[str, List[int]] = data.get("rects", {})
    w = int(canvas.get("w", 250))
    h = int(canvas.get("h", 122))
    digest = hashlib.md5(
        json.dumps(data, sort_keys=True).encode("utf-8")
    ).hexdigest()
    # Compute a small CRC32 over the canonical canvas+rects object for parity checks
    crc_obj = json.dumps(
        {"canvas": canvas, "rects": rects}, sort_keys=True
    ).encode("utf-8")
    layout_crc = zlib.crc32(crc_obj) & 0xFFFFFFFF
    # Prefer explicit layout_version key, else fall back to generic version or 1
    layout_version = int(data.get("layout_version", data.get("version", 1)))

    lines: List[str] = []
    lines.append("// AUTO-GENERATED by scripts/gen_layout_header.py — DO NOT EDIT")
    lines.append(f"// source: {JSON_PATH.as_posix()}")
    lines.append(f"// md5: {digest}")
    lines.append("#pragma once")
    lines.append("")
    lines.append("// Layout identity for simulator ↔ firmware parity checks")
    lines.append(f"#define LAYOUT_VERSION {layout_version}")
    lines.append(f"#define LAYOUT_CRC 0x{layout_crc:08X}u")
    lines.append(f'#define LAYOUT_MD5 "{digest}"')
    lines.append("")
    lines.append("// Display dimensions")
    lines.append("#ifndef EINK_WIDTH")
    lines.append(f"#define EINK_WIDTH {w}")
    lines.append("#endif")
    lines.append("#ifndef EINK_HEIGHT")
    lines.append(f"#define EINK_HEIGHT {h}")
    lines.append("#endif")
    lines.append("")
    lines.append("// Partial update windows (x, y, w, h) — generated from display_geometry.json")

    # Helper to avoid emitting reserved/conflicting identifiers (e.g., STATUS)
    def emitted_name(name: str) -> str:
        return "STATUS_" if name == "STATUS" else name

    # Emit arrays
    for name, xywh in rects.items():
        x, y, rw, rh = [int(v) for v in xywh]
        var = emitted_name(name)
        lines.append(f"static constexpr int {var}[4] = {{ {x:3d}, {y:3d}, {rw:3d}, {rh:2d}}};")

    lines.append("")
    lines.append("enum WeatherIconId {")
    lines.append("    ICON_CLEAR = 0,")
    lines.append("    ICON_PARTLY,")
    lines.append("    ICON_CLOUDY,")
    lines.append("    ICON_RAIN,")
    lines.append("    ICON_STORM,")
    lines.append("    ICON_SNOW,")
    lines.append("    ICON_FOG,")
    lines.append("};")
    lines.append("")
    lines.append("// Compile-time layout sanity checks (widths/heights within bounds)")
    for name, xywh in rects.items():
        x, y, rw, rh = [int(v) for v in xywh]
        var = emitted_name(name)
        lines.append(f'static_assert({var}[0] >= 0 && {var}[1] >= 0, "{name} origin");')
        lines.append(f'static_assert({x} + {rw} <= EINK_WIDTH,  "{name} width");')
        lines.append(f'static_assert({y} + {rh} <= EINK_HEIGHT, "{name} height");')
    if "STATUS" in rects:
        x, y, rw, rh = [int(v) for v in rects["STATUS"]]
        lines.append('static_assert(STATUS_[0] + STATUS_[2] <= EINK_WIDTH,  "STATUS_ width");')
    lines.append("")
    return "\n".join(lines) + "\n"


def main() -> None:
    if not JSON_PATH.exists():
        print(f"ERR: geometry json not found: {JSON_PATH}")
        return
    data = json.loads(JSON_PATH.read_text())
    header = generate_header(data)
    OUT_PATH.parent.mkdir(parents=True, exist_ok=True)
    OUT_PATH.write_text(header)
    print(f"Wrote {OUT_PATH} from {JSON_PATH}")


if __name__ == "__main__":
    main()
