// AUTO-GENERATED by scripts/gen_ui.py â€” DO NOT EDIT
// source: /Users/justin/Documents/Github/ESP32-Temp-Sensor/config/ui_spec.json
#include <cstddef>
#include "ui_ops_generated.h"

namespace ui {

const UiOpHeader kOps_chrome[] = {
    { OP_LINE, 255, 0, 0, 0, 0, 249, 0, NULL, NULL },
    { OP_LINE, 255, 0, 0, 0, 121, 249, 121, NULL, NULL },
    { OP_LINE, 255, 0, 0, 0, 0, 0, 121, NULL, NULL },
    { OP_LINE, 255, 0, 0, 249, 0, 249, 121, NULL, NULL },
    { OP_LINE, 255, 0, 0, 125, 14, 125, 121, NULL, NULL },
    { OP_LINE, 255, 0, 0, 1, 80, 249, 80, NULL, NULL },
};
const int kOps_chrome_count = sizeof(kOps_chrome)/sizeof(kOps_chrome[0]);

const UiOpHeader kOps_header_centered[] = {
    { OP_LINE, 255, 0, 0, 1, 14, 249, 14, NULL, NULL },
    { OP_TEXT, 2, 1, 0, 0, 0, 0, 0, "{room_name}", NULL },
    { OP_TEXTCENTEREDIN, 3, 3, 2, 1, 0, 0, 0, "{time_hhmm}", NULL },
    { OP_TEXT, 4, 3, 1, 0, 0, 0, 0, "v{fw_version}", NULL },
};
const int kOps_header_centered_count = sizeof(kOps_header_centered)/sizeof(kOps_header_centered[0]);

const UiOpHeader kOps_header[] = {
    { OP_LINE, 255, 0, 0, 1, 14, 249, 14, NULL, NULL },
    { OP_TEXT, 2, 1, 0, 0, 0, 0, 0, "{room_name}", NULL },
    { OP_TIMERIGHT, 4, 3, 1, 0, 0, 0, 0, "time_hhmm", NULL },
};
const int kOps_header_count = sizeof(kOps_header)/sizeof(kOps_header[0]);

const UiOpHeader kOps_inside[] = {
    { OP_TEXT, 255, 1, 0, 30, 20, 0, 0, "INSIDE", NULL },
    { OP_TEMPGROUPCENTERED, 7, 0, 2, 0, 0, 0, 0, "inside_temp_f", NULL },
    { OP_TEXT, 5, 2, 0, 0, 0, 0, 0, "{inside_hum_pct}% RH", NULL },
    { OP_TEXT, 6, 2, 0, 0, 3, 0, 0, "{pressure_hpa:.1f} hPa", NULL },
};
const int kOps_inside_count = sizeof(kOps_inside)/sizeof(kOps_inside[0]);

const UiOpHeader kOps_outside[] = {
    { OP_TEXT, 255, 1, 0, 145, 20, 0, 0, "OUTSIDE", NULL },
    { OP_TEMPGROUPCENTERED, 10, 0, 2, 0, 0, 0, 0, "outside_temp_f", NULL },
    { OP_ICONIN, 12, 0, 0, 0, 0, 0, 0, "weather", NULL },
    { OP_TEXT, 9, 2, 0, 0, 3, 0, 0, "{outside_pressure_hpa:.0f} hPa", NULL },
    { OP_TEXT, 8, 2, 0, 0, 0, 0, 0, "{outside_hum_pct}% RH", NULL },
    { OP_TEXT, 11, 2, 0, 0, 0, 0, 0, "{wind_mps->mph:.1f} mph", NULL },
};
const int kOps_outside_count = sizeof(kOps_outside)/sizeof(kOps_outside[0]);

const UiOpHeader kOps_footer_split[] = {
    { OP_BATTERYGLYPH, 255, 0, 0, 5, 89, 16, 8, "battery_percent", NULL },
    { OP_TEXT, 255, 2, 0, 26, 82, 0, 0, "Batt {battery_voltage:.2f}V {battery_percent}%", NULL },
    { OP_TEXT, 255, 2, 0, 26, 94, 0, 0, "~{days}d", NULL },
    { OP_TEXT, 255, 2, 0, 26, 106, 0, 0, "IP {ip}", NULL },
    { OP_TEXTCENTEREDIN, 1, 2, 2, 11, 0, 0, 0, "{weather}", NULL },
};
const int kOps_footer_split_count = sizeof(kOps_footer_split)/sizeof(kOps_footer_split[0]);

const ComponentOps kVariant_v2_ops[] = {
    { kOps_chrome, kOps_chrome_count, "chrome" },
    { kOps_header_centered, kOps_header_centered_count, "header_centered" },
    { kOps_inside, kOps_inside_count, "inside" },
    { kOps_outside, kOps_outside_count, "outside" },
    { kOps_footer_split, kOps_footer_split_count, "footer_split" },
};
const int kVariant_v2_ops_count = sizeof(kVariant_v2_ops)/sizeof(kVariant_v2_ops[0]);

const ComponentOps* get_variant_ops(uint8_t variantId, int* outCount){
  if (variantId == 0) { if(outCount) *outCount = kVariant_v2_ops_count; return kVariant_v2_ops; }
  if(outCount) *outCount = 0; return nullptr;
}

} // namespace ui
