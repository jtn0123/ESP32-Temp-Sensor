// AUTO-GENERATED by scripts/gen_ui.py — DO NOT EDIT
// source: /Users/justin/Documents/Github/ESP32-Temp-Sensor/config/ui_spec.json
// schema: ui-spec@1
#pragma once

// Layout identity for simulator ↔ firmware parity checks
#define LAYOUT_VERSION 1
#define LAYOUT_CRC 0x153B7A86u
#define LAYOUT_MD5 "fa6f049590ce6069ee5fb1ad7054c4e3"

// Display dimensions
#define DISPLAY_WIDTH 250
#define DISPLAY_HEIGHT 122

// Partial update windows (x, y, w, h) — generated from ui_spec.json
static constexpr int RECT_HEADER_NAME[4] = {   6,   2, 160, 14};
static constexpr int RECT_HEADER_VERSION[4] = { 172,   2,  72, 14};
static constexpr int RECT_HEADER_TIME_CENTER[4] = { 100,   2,  50, 14};
static constexpr int RECT_INSIDE_TEMP[4] = {   6,  36, 118, 28};
static constexpr int RECT_INSIDE_RH[4] = {   6,  66, 118, 14};
static constexpr int RECT_INSIDE_ROW2[4] = {   6,  78, 118, 12};
static constexpr int RECT_OUT_TEMP[4] = { 129,  36,  94, 28};
static constexpr int RECT_WEATHER_ICON[4] = { 210,  22,  28, 28};
static constexpr int RECT_OUT_WEATHER[4] = { 131,  68,  44, 12};
static constexpr int RECT_OUT_PRESSURE[4] = { 177,  68,  64, 12};
static constexpr int RECT_OUT_HUMIDITY[4] = { 131,  78,  44, 12};
static constexpr int RECT_OUT_WIND[4] = { 177,  78,  44, 12};
static constexpr int RECT_FOOTER_L[4] = {   6,  90, 160, 32};
static constexpr int RECT_FOOTER_WEATHER[4] = { 170,  90,  74, 32};

enum WeatherIconId {
    ICON_CLEAR = 0,
    ICON_PARTLY,
    ICON_CLOUDY,
    ICON_RAIN,
    ICON_STORM,
    ICON_SNOW,
    ICON_FOG,
};

// Compile-time layout sanity checks (widths/heights within bounds)
static_assert(RECT_HEADER_NAME[0] >= 0 && RECT_HEADER_NAME[1] >= 0, "HEADER_NAME origin");
static_assert(6 + 160 <= DISPLAY_WIDTH,  "HEADER_NAME width");
static_assert(2 + 14 <= DISPLAY_HEIGHT, "HEADER_NAME height");
static_assert(RECT_HEADER_VERSION[0] >= 0 && RECT_HEADER_VERSION[1] >= 0, "HEADER_VERSION origin");
static_assert(172 + 72 <= DISPLAY_WIDTH,  "HEADER_VERSION width");
static_assert(2 + 14 <= DISPLAY_HEIGHT, "HEADER_VERSION height");
static_assert(RECT_HEADER_TIME_CENTER[0] >= 0 && RECT_HEADER_TIME_CENTER[1] >= 0, "HEADER_TIME_CENTER origin");
static_assert(100 + 50 <= DISPLAY_WIDTH,  "HEADER_TIME_CENTER width");
static_assert(2 + 14 <= DISPLAY_HEIGHT, "HEADER_TIME_CENTER height");
static_assert(RECT_INSIDE_TEMP[0] >= 0 && RECT_INSIDE_TEMP[1] >= 0, "INSIDE_TEMP origin");
static_assert(6 + 118 <= DISPLAY_WIDTH,  "INSIDE_TEMP width");
static_assert(36 + 28 <= DISPLAY_HEIGHT, "INSIDE_TEMP height");
static_assert(RECT_INSIDE_RH[0] >= 0 && RECT_INSIDE_RH[1] >= 0, "INSIDE_RH origin");
static_assert(6 + 118 <= DISPLAY_WIDTH,  "INSIDE_RH width");
static_assert(66 + 14 <= DISPLAY_HEIGHT, "INSIDE_RH height");
static_assert(RECT_INSIDE_ROW2[0] >= 0 && RECT_INSIDE_ROW2[1] >= 0, "INSIDE_ROW2 origin");
static_assert(6 + 118 <= DISPLAY_WIDTH,  "INSIDE_ROW2 width");
static_assert(78 + 12 <= DISPLAY_HEIGHT, "INSIDE_ROW2 height");
static_assert(RECT_OUT_TEMP[0] >= 0 && RECT_OUT_TEMP[1] >= 0, "OUT_TEMP origin");
static_assert(129 + 94 <= DISPLAY_WIDTH,  "OUT_TEMP width");
static_assert(36 + 28 <= DISPLAY_HEIGHT, "OUT_TEMP height");
static_assert(RECT_WEATHER_ICON[0] >= 0 && RECT_WEATHER_ICON[1] >= 0, "WEATHER_ICON origin");
static_assert(210 + 28 <= DISPLAY_WIDTH,  "WEATHER_ICON width");
static_assert(22 + 28 <= DISPLAY_HEIGHT, "WEATHER_ICON height");
static_assert(RECT_OUT_WEATHER[0] >= 0 && RECT_OUT_WEATHER[1] >= 0, "OUT_WEATHER origin");
static_assert(131 + 44 <= DISPLAY_WIDTH,  "OUT_WEATHER width");
static_assert(68 + 12 <= DISPLAY_HEIGHT, "OUT_WEATHER height");
static_assert(RECT_OUT_PRESSURE[0] >= 0 && RECT_OUT_PRESSURE[1] >= 0, "OUT_PRESSURE origin");
static_assert(177 + 64 <= DISPLAY_WIDTH,  "OUT_PRESSURE width");
static_assert(68 + 12 <= DISPLAY_HEIGHT, "OUT_PRESSURE height");
static_assert(RECT_OUT_HUMIDITY[0] >= 0 && RECT_OUT_HUMIDITY[1] >= 0, "OUT_HUMIDITY origin");
static_assert(131 + 44 <= DISPLAY_WIDTH,  "OUT_HUMIDITY width");
static_assert(78 + 12 <= DISPLAY_HEIGHT, "OUT_HUMIDITY height");
static_assert(RECT_OUT_WIND[0] >= 0 && RECT_OUT_WIND[1] >= 0, "OUT_WIND origin");
static_assert(177 + 44 <= DISPLAY_WIDTH,  "OUT_WIND width");
static_assert(78 + 12 <= DISPLAY_HEIGHT, "OUT_WIND height");
static_assert(RECT_FOOTER_L[0] >= 0 && RECT_FOOTER_L[1] >= 0, "FOOTER_L origin");
static_assert(6 + 160 <= DISPLAY_WIDTH,  "FOOTER_L width");
static_assert(90 + 32 <= DISPLAY_HEIGHT, "FOOTER_L height");
static_assert(RECT_FOOTER_WEATHER[0] >= 0 && RECT_FOOTER_WEATHER[1] >= 0, "FOOTER_WEATHER origin");
static_assert(170 + 74 <= DISPLAY_WIDTH,  "FOOTER_WEATHER width");
static_assert(90 + 32 <= DISPLAY_HEIGHT, "FOOTER_WEATHER height");

