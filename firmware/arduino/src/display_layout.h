// AUTO-GENERATED by scripts/gen_layout_header.py — DO NOT EDIT
// source: /Users/justin/Documents/Github/ESP32-Temp-Sensor/config/display_geometry.json
// md5: b6eba4b79b953dd66cfff96b9f97d9ab
#pragma once

// Layout identity for simulator ↔ firmware parity checks
#define LAYOUT_VERSION 1
#define LAYOUT_CRC 0x664F7BC8u
#define LAYOUT_MD5 "b6eba4b79b953dd66cfff96b9f97d9ab"

// Display dimensions
#ifndef EINK_WIDTH
#define EINK_WIDTH 250
#endif
#ifndef EINK_HEIGHT
#define EINK_HEIGHT 122
#endif
#define DISPLAY_WIDTH 250
#define DISPLAY_HEIGHT 122

// Partial update windows (x, y, w, h) — generated from display_geometry.json
static constexpr int HEADER_NAME[4] = {   6,   2, 160, 14};
static constexpr int HEADER_VERSION[4] = { 172,   2,  72, 14};
static constexpr int HEADER_TIME_CENTER[4] = { 100,   2,  50, 14};
static constexpr int INSIDE_TEMP[4] = {   6,  36, 118, 28};
static constexpr int INSIDE_HUMIDITY[4] = {   6,  66, 115, 14};
static constexpr int INSIDE_PRESSURE[4] = {   6,  73, 115, 14};
static constexpr int OUT_TEMP[4] = { 129,  36,  94, 28};
static constexpr int WEATHER_ICON[4] = { 170,  92,  30, 28};
static constexpr int OUT_PRESSURE[4] = { 177,  66,  64, 14};
static constexpr int OUT_HUMIDITY[4] = { 131,  73,  44, 14};
static constexpr int OUT_WIND[4] = { 177,  73,  44, 14};
static constexpr int FOOTER_STATUS[4] = {   6,  92, 160, 28};
static constexpr int FOOTER_WEATHER[4] = { 202,  92,  46, 28};

enum WeatherIconId {
    ICON_CLEAR = 0,
    ICON_PARTLY,
    ICON_CLOUDY,
    ICON_RAIN,
    ICON_STORM,
    ICON_SNOW,
    ICON_FOG,
};

// Compile-time layout sanity checks (widths/heights within bounds)
static_assert(HEADER_NAME[0] >= 0 && HEADER_NAME[1] >= 0, "HEADER_NAME origin");
static_assert(6 + 160 <= EINK_WIDTH,  "HEADER_NAME width");
static_assert(2 + 14 <= EINK_HEIGHT, "HEADER_NAME height");
static_assert(HEADER_VERSION[0] >= 0 && HEADER_VERSION[1] >= 0, "HEADER_VERSION origin");
static_assert(172 + 72 <= EINK_WIDTH,  "HEADER_VERSION width");
static_assert(2 + 14 <= EINK_HEIGHT, "HEADER_VERSION height");
static_assert(HEADER_TIME_CENTER[0] >= 0 && HEADER_TIME_CENTER[1] >= 0, "HEADER_TIME_CENTER origin");
static_assert(100 + 50 <= EINK_WIDTH,  "HEADER_TIME_CENTER width");
static_assert(2 + 14 <= EINK_HEIGHT, "HEADER_TIME_CENTER height");
static_assert(INSIDE_TEMP[0] >= 0 && INSIDE_TEMP[1] >= 0, "INSIDE_TEMP origin");
static_assert(6 + 118 <= EINK_WIDTH,  "INSIDE_TEMP width");
static_assert(36 + 28 <= EINK_HEIGHT, "INSIDE_TEMP height");
static_assert(INSIDE_HUMIDITY[0] >= 0 && INSIDE_HUMIDITY[1] >= 0, "INSIDE_HUMIDITY origin");
static_assert(6 + 115 <= EINK_WIDTH,  "INSIDE_HUMIDITY width");
static_assert(66 + 14 <= EINK_HEIGHT, "INSIDE_HUMIDITY height");
static_assert(INSIDE_PRESSURE[0] >= 0 && INSIDE_PRESSURE[1] >= 0, "INSIDE_PRESSURE origin");
static_assert(6 + 115 <= EINK_WIDTH,  "INSIDE_PRESSURE width");
static_assert(73 + 14 <= EINK_HEIGHT, "INSIDE_PRESSURE height");
static_assert(OUT_TEMP[0] >= 0 && OUT_TEMP[1] >= 0, "OUT_TEMP origin");
static_assert(129 + 94 <= EINK_WIDTH,  "OUT_TEMP width");
static_assert(36 + 28 <= EINK_HEIGHT, "OUT_TEMP height");
static_assert(WEATHER_ICON[0] >= 0 && WEATHER_ICON[1] >= 0, "WEATHER_ICON origin");
static_assert(170 + 30 <= EINK_WIDTH,  "WEATHER_ICON width");
static_assert(92 + 28 <= EINK_HEIGHT, "WEATHER_ICON height");
static_assert(OUT_PRESSURE[0] >= 0 && OUT_PRESSURE[1] >= 0, "OUT_PRESSURE origin");
static_assert(177 + 64 <= EINK_WIDTH,  "OUT_PRESSURE width");
static_assert(66 + 14 <= EINK_HEIGHT, "OUT_PRESSURE height");
static_assert(OUT_HUMIDITY[0] >= 0 && OUT_HUMIDITY[1] >= 0, "OUT_HUMIDITY origin");
static_assert(131 + 44 <= EINK_WIDTH,  "OUT_HUMIDITY width");
static_assert(73 + 14 <= EINK_HEIGHT, "OUT_HUMIDITY height");
static_assert(OUT_WIND[0] >= 0 && OUT_WIND[1] >= 0, "OUT_WIND origin");
static_assert(177 + 44 <= EINK_WIDTH,  "OUT_WIND width");
static_assert(73 + 14 <= EINK_HEIGHT, "OUT_WIND height");
static_assert(FOOTER_STATUS[0] >= 0 && FOOTER_STATUS[1] >= 0, "FOOTER_STATUS origin");
static_assert(6 + 160 <= EINK_WIDTH,  "FOOTER_STATUS width");
static_assert(92 + 28 <= EINK_HEIGHT, "FOOTER_STATUS height");
static_assert(FOOTER_WEATHER[0] >= 0 && FOOTER_WEATHER[1] >= 0, "FOOTER_WEATHER origin");
static_assert(202 + 46 <= EINK_WIDTH,  "FOOTER_WEATHER width");
static_assert(92 + 28 <= EINK_HEIGHT, "FOOTER_WEATHER height");

