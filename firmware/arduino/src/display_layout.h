// AUTO-GENERATED by scripts/gen_layout_header.py — DO NOT EDIT
// source: /Users/justin/Documents/Github/ESP32-Temp-Sensor/config/display_geometry.json
// md5: 2944ade7a9a49e40b6b6008d4ccdf6dd
#pragma once

// Layout identity for simulator ↔ firmware parity checks
#define LAYOUT_VERSION 1
#define LAYOUT_CRC 0x8A4560A1u
#define LAYOUT_MD5 "2944ade7a9a49e40b6b6008d4ccdf6dd"

// Display dimensions
#ifndef EINK_WIDTH
#define EINK_WIDTH 250
#endif
#ifndef EINK_HEIGHT
#define EINK_HEIGHT 122
#endif
#define DISPLAY_WIDTH 250
#define DISPLAY_HEIGHT 122

// Partial update windows (x, y, w, h) — generated from display_geometry.json
static constexpr int HEADER_NAME[4] = {   6,   2, 160, 14};
static constexpr int HEADER_TIME[4] = { 172,   2,  72, 14};
static constexpr int HEADER_CENTER[4] = { 100,   2,  50, 14};
static constexpr int INSIDE_TEMP[4] = {   6,  36, 118, 28};
static constexpr int INSIDE_RH[4] = {   6,  66, 118, 14};
static constexpr int INSIDE_TIME[4] = {   6,  78, 118, 12};
static constexpr int OUT_TEMP[4] = { 129,  36,  94, 28};
static constexpr int OUT_ICON[4] = { 210,  22,  28, 28};
static constexpr int OUT_ROW1_L[4] = { 131,  68,  44, 12};
static constexpr int OUT_ROW1_R[4] = { 177,  68,  64, 12};
static constexpr int OUT_ROW2_L[4] = { 131,  78,  44, 12};
static constexpr int OUT_ROW2_R[4] = { 177,  78,  44, 12};
static constexpr int FOOTER_L[4] = {   6,  90, 160, 32};
static constexpr int FOOTER_R[4] = { 170,  90,  74, 32};
static constexpr int STATUS_[4] = {   6, 112, 238, 10};

enum WeatherIconId {
    ICON_CLEAR = 0,
    ICON_PARTLY,
    ICON_CLOUDY,
    ICON_RAIN,
    ICON_STORM,
    ICON_SNOW,
    ICON_FOG,
};

// Compile-time layout sanity checks (widths/heights within bounds)
static_assert(HEADER_NAME[0] >= 0 && HEADER_NAME[1] >= 0, "HEADER_NAME origin");
static_assert(6 + 160 <= EINK_WIDTH,  "HEADER_NAME width");
static_assert(2 + 14 <= EINK_HEIGHT, "HEADER_NAME height");
static_assert(HEADER_TIME[0] >= 0 && HEADER_TIME[1] >= 0, "HEADER_TIME origin");
static_assert(172 + 72 <= EINK_WIDTH,  "HEADER_TIME width");
static_assert(2 + 14 <= EINK_HEIGHT, "HEADER_TIME height");
static_assert(HEADER_CENTER[0] >= 0 && HEADER_CENTER[1] >= 0, "HEADER_CENTER origin");
static_assert(100 + 50 <= EINK_WIDTH,  "HEADER_CENTER width");
static_assert(2 + 14 <= EINK_HEIGHT, "HEADER_CENTER height");
static_assert(INSIDE_TEMP[0] >= 0 && INSIDE_TEMP[1] >= 0, "INSIDE_TEMP origin");
static_assert(6 + 118 <= EINK_WIDTH,  "INSIDE_TEMP width");
static_assert(36 + 28 <= EINK_HEIGHT, "INSIDE_TEMP height");
static_assert(INSIDE_RH[0] >= 0 && INSIDE_RH[1] >= 0, "INSIDE_RH origin");
static_assert(6 + 118 <= EINK_WIDTH,  "INSIDE_RH width");
static_assert(66 + 14 <= EINK_HEIGHT, "INSIDE_RH height");
static_assert(INSIDE_TIME[0] >= 0 && INSIDE_TIME[1] >= 0, "INSIDE_TIME origin");
static_assert(6 + 118 <= EINK_WIDTH,  "INSIDE_TIME width");
static_assert(78 + 12 <= EINK_HEIGHT, "INSIDE_TIME height");
static_assert(OUT_TEMP[0] >= 0 && OUT_TEMP[1] >= 0, "OUT_TEMP origin");
static_assert(129 + 94 <= EINK_WIDTH,  "OUT_TEMP width");
static_assert(36 + 28 <= EINK_HEIGHT, "OUT_TEMP height");
static_assert(OUT_ICON[0] >= 0 && OUT_ICON[1] >= 0, "OUT_ICON origin");
static_assert(210 + 28 <= EINK_WIDTH,  "OUT_ICON width");
static_assert(22 + 28 <= EINK_HEIGHT, "OUT_ICON height");
static_assert(OUT_ROW1_L[0] >= 0 && OUT_ROW1_L[1] >= 0, "OUT_ROW1_L origin");
static_assert(131 + 44 <= EINK_WIDTH,  "OUT_ROW1_L width");
static_assert(68 + 12 <= EINK_HEIGHT, "OUT_ROW1_L height");
static_assert(OUT_ROW1_R[0] >= 0 && OUT_ROW1_R[1] >= 0, "OUT_ROW1_R origin");
static_assert(177 + 64 <= EINK_WIDTH,  "OUT_ROW1_R width");
static_assert(68 + 12 <= EINK_HEIGHT, "OUT_ROW1_R height");
static_assert(OUT_ROW2_L[0] >= 0 && OUT_ROW2_L[1] >= 0, "OUT_ROW2_L origin");
static_assert(131 + 44 <= EINK_WIDTH,  "OUT_ROW2_L width");
static_assert(78 + 12 <= EINK_HEIGHT, "OUT_ROW2_L height");
static_assert(OUT_ROW2_R[0] >= 0 && OUT_ROW2_R[1] >= 0, "OUT_ROW2_R origin");
static_assert(177 + 44 <= EINK_WIDTH,  "OUT_ROW2_R width");
static_assert(78 + 12 <= EINK_HEIGHT, "OUT_ROW2_R height");
static_assert(FOOTER_L[0] >= 0 && FOOTER_L[1] >= 0, "FOOTER_L origin");
static_assert(6 + 160 <= EINK_WIDTH,  "FOOTER_L width");
static_assert(90 + 32 <= EINK_HEIGHT, "FOOTER_L height");
static_assert(FOOTER_R[0] >= 0 && FOOTER_R[1] >= 0, "FOOTER_R origin");
static_assert(170 + 74 <= EINK_WIDTH,  "FOOTER_R width");
static_assert(90 + 32 <= EINK_HEIGHT, "FOOTER_R height");
static_assert(STATUS_[0] >= 0 && STATUS_[1] >= 0, "STATUS origin");
static_assert(6 + 238 <= EINK_WIDTH,  "STATUS width");
static_assert(112 + 10 <= EINK_HEIGHT, "STATUS height");
static_assert(STATUS_[0] + STATUS_[2] <= EINK_WIDTH,  "STATUS_ width");

