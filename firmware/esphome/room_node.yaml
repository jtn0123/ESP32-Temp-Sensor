esphome:
  name: room-office
  platform: ESP32
  board: featheresp32-s2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  ap:
    ssid: "room-node-setup"
    password: "roomnode1234"

api:
logger:
ota:
  password: !secret ota_password

i2c:
spi:
  clk_pin: GPIO36
  mosi_pin: GPIO35
  miso_pin: GPIO37

sensor:
  - platform: sht4x
    temperature:
      name: "Office Temperature"
      id: inside_temp
    humidity:
      name: "Office Humidity"
      id: inside_hum
  - platform: homeassistant
    entity_id: sensor.outdoor_temperature
    id: outside_temp
  - platform: homeassistant
    entity_id: sensor.outdoor_humidity
    id: outside_hum

text_sensor:
  - platform: homeassistant
    entity_id: weather.home
    id: outside_condition

font:
  - file: "gfonts://Roboto@bold"
    id: font_big
    size: 22
  - file: "gfonts://Roboto"
    id: font_small
    size: 12

image:
  - file: "../../config/icons/clear.png"
    id: ico_clear
    type: BINARY
  - file: "../../config/icons/partly.png"
    id: ico_partly
    type: BINARY
  - file: "../../config/icons/cloudy.png"
    id: ico_cloudy
    type: BINARY
  - file: "../../config/icons/rain.png"
    id: ico_rain
    type: BINARY
  - file: "../../config/icons/snow.png"
    id: ico_snow
    type: BINARY
  - file: "../../config/icons/storm.png"
    id: ico_storm
    type: BINARY
  - file: "../../config/icons/fog.png"
    id: ico_fog
    type: BINARY
  - file: "../../config/icons/sunny.png"
    id: ico_sunny
    type: BINARY

display:
  - platform: waveshare_epaper
    # Try model: 2.13in first; if rendering is wrong, try 2.13in-ttgo or 2.13in_v2
    model: 2.13in
    cs_pin: GPIO9
    dc_pin: GPIO10
    busy_pin: GPIO7
    rotation: 90
    partial_updates: true
    full_update_every: 12
    lambda: |-
      const int WIDTH = 250, HEIGHT = 122;
      const int INSIDE_TEMP_X = 6,  INSIDE_TEMP_Y = 38;
      const int INSIDE_RH_X   = 6,  INSIDE_RH_Y   = 64;
      const int INSIDE_TIME_X = 6,  INSIDE_TIME_Y = 78;
      const int OUT_TEMP_X    = 131, OUT_TEMP_Y    = 38;
      const int OUT_RH_X      = 131, OUT_RH_Y      = 64;
      const int OUT_ICON_X    = 218, OUT_ICON_Y    = 22;
      const int STATUS_X      = 6,  STATUS_Y      = 96;

      // Frame + header bar
      it.draw_rectangle(0, 0, WIDTH, HEIGHT);
      it.filled_rectangle(1, 1, WIDTH-2, 17);
      it.printf(4, 4, id(font_small), COLOR_ON, "%s", App.get_name().c_str());
      // header underline + column divider
      it.hline(1, 18, WIDTH-2);
      it.vline(125, 18, 77);

      // Labels
      it.printf(6, 22, id(font_small), COLOR_ON, "INSIDE");
      it.printf(131, 22, id(font_small), COLOR_ON, "OUTSIDE");

      // Inside values
      if (!isnan(id(inside_temp).state)) {
        it.printf(INSIDE_TEMP_X, INSIDE_TEMP_Y, id(font_big), COLOR_ON, "%.1f° F", id(inside_temp).state * 9.0/5.0 + 32.0);
      }
      if (!isnan(id(inside_hum).state)) {
        it.printf(INSIDE_RH_X, INSIDE_RH_Y, id(font_small), COLOR_ON, "%.0f%% RH", id(inside_hum).state);
      }

      // Outside values
      if (!isnan(id(outside_temp).state)) {
        it.printf(OUT_TEMP_X, OUT_TEMP_Y, id(font_big), COLOR_ON, "%.1f° F", id(outside_temp).state * 9.0/5.0 + 32.0);
      }
      if (!isnan(id(outside_hum).state)) {
        it.printf(OUT_RH_X, OUT_RH_Y, id(font_small), COLOR_ON, "%.0f%% RH", id(outside_hum).state);
      }

      // Weather icon mapping
      auto cond = id(outside_condition).state;
      auto lower = tolower(cond);
      Image *icon = &id(ico_cloudy);
      if (lower.find("storm") != std::string::npos || lower.find("thunder") != std::string::npos) icon = &id(ico_storm);
      else if (lower.find("pour") != std::string::npos || lower.find("rain") != std::string::npos) icon = &id(ico_rain);
      else if (lower.find("snow") != std::string::npos) icon = &id(ico_snow);
      else if (lower.find("fog") != std::string::npos || lower.find("mist") != std::string::npos || lower.find("haze") != std::string::npos) icon = &id(ico_fog);
      else if (lower.find("part") != std::string::npos) icon = &id(ico_partly);
      else if (lower.find("cloud") != std::string::npos || lower.find("overcast") != std::string::npos) icon = &id(ico_cloudy);
      else if (lower.find("sun") != std::string::npos || lower.find("clear") != std::string::npos) icon = &id(ico_sunny);
      it.image(OUT_ICON_X, OUT_ICON_Y, *icon);

      // Status line (no IP here; optional)
      it.printf(STATUS_X, STATUS_Y, id(font_small), COLOR_ON, "HA ✓    Sleep 2h");

deep_sleep:
  id: deep_sleep_control
  run_duration: 30s
  sleep_duration: 2h


