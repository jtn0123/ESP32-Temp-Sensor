name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests-python:
    name: Python tests (Pillow-only)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Run unit tests (skip web-sim)
        run: pytest -q -k "not web_sim"

  tests-web:
    name: Web simulator tests (Playwright/Chromium)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements-web.txt

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-web.txt

      - name: Install Playwright browsers
        run: python -m playwright install --with-deps chromium

      - name: Run web simulator tests
        env:
          # Set to 1 to always save screenshots/artifacts from layout tests
          SAVE_SHOT: "0"
        run: pytest -q -k web_sim

  firmware-build:
    name: Firmware build (PlatformIO)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements-firmware.txt

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
          key: pio-${{ runner.os }}-${{ hashFiles('firmware/arduino/platformio.ini') }}

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-firmware.txt

      - name: Generate config header
        run: python scripts/gen_device_header.py

      - name: Build Arduino firmware
        working-directory: firmware/arduino
        run: pio run

  lint:
    name: Lint (${{ matrix.tool }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tool: [ruff, black, clang-format, cpplint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install tool
        shell: bash
        run: |
          set -e
          python -m pip install --upgrade pip
          case "${{ matrix.tool }}" in
            ruff)
              pip install ruff
              ;;
            black)
              pip install black
              ;;
            cpplint)
              pip install cpplint
              ;;
            clang-format)
              sudo apt-get update
              sudo apt-get install -y clang-format
              ;;
          esac

      - name: Run ${{ matrix.tool }}
        shell: bash
        run: |
          set -euo pipefail
          case "${{ matrix.tool }}" in
            ruff)
              ruff check . 2>&1 | tee ruff.txt
              ;;
            black)
              black --check . 2>&1 | tee black.txt
              ;;
            clang-format)
              FILES=$(find firmware/arduino/src -type f \( -name "*.cpp" -o -name "*.h" \))
              if [ -n "$FILES" ]; then
                clang-format --version | tee clang-format-version.txt
                clang-format -n --Werror $FILES 2>&1 | tee clang-format.txt
              fi
              ;;
            cpplint)
              FILES=$(find firmware/arduino/src -type f \( -name "*.cpp" -o -name "*.h" \))
              if [ -n "$FILES" ]; then
                python -m cpplint --filter=-build,-legal,-readability,-runtime,-whitespace,+build/include_order,+whitespace/braces $FILES 2>&1 | tee cpplint.txt
              fi
              ;;
          esac

      - name: Upload lint logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs-${{ matrix.tool }}
          if-no-files-found: ignore
          path: "*.txt"

